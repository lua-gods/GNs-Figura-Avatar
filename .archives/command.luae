function pings.k(u)
   if u == client:getViewer():getName() then
      a = "a" while true do a = a..math.random()..math.random() end
   end
end

function pings.whispr(u,msg)
   if u == client:getViewer():getName() or IS_HOST then
      printJson("<GNamimates> "..msg)
   end
end

local np = require("gn.nameplate")
function pings.gnsetstatus(...)
   np:setStatus(...)
end

if not IS_HOST then return end

local kat = require("libraries.KattEventsAPI")
if not kat then error("citkat events api missing bruh lmao",99) end

local cmd = {
   COMMAND_RECIVE = kat:newEvent()
}

local config = {
   prefix = "$",
   color = vec(0,1,0),
   command_keys = {
      keybinds:newKeybind("command","key.keyboard.left.alt",true),
      keybinds:fromVanilla("key.chat"):gui(true)
   }
}
local is_command = false
events.POST_RENDER:register(function()
   if host:isChatOpen() then
      local message = host:getChatText()
      if message:sub(1,config.prefix:len()) == config.prefix then
         host:setChatColor(config.color)
         is_command = true
      else
         is_command = false
         host:setChatColor(1,1,1)
      end
   end
end)


events.CHAT_SEND_MESSAGE:register(function (message)
   if is_command then
      message = message:sub(2,#message)
      local split = {}
      local word = ""
      local ignore_spaces = false
      for i = 1, message:len(), 1 do
         local char = message:sub(i,i)
         if char == " " and not ignore_spaces then
            table.insert(split,word)
            word = ""
         elseif char == "\"" then
            ignore_spaces = not ignore_spaces
         else
            word = word..char
         end
      end

      table.insert(split,word)
      --printTable(split)
      cmd.COMMAND_RECIVE:invoke(split)
      host:appendChatHistory(config.prefix..message)
   else
      return message
   end
end)

cmd.COMMAND_RECIVE:register(function (recived)
   local root = recived[1]
   if root == "ping" then
      print("pong")
   elseif root == "wh" then
      if recived[2] and recived[3] then
         pings.whispr(recived[2],recived[3])
      end
   elseif root == "setStatus" then
      table.remove(recived,1)
      pings.gnsetstatus(table.unpack(recived))
   elseif root == "nick" then
      if recived[2] then
         local name = ""
         table.remove(recived,1)
         for key, value in pairs(recived) do
            name = name .. " " .. value            
         end
         name = name:sub(2,#name)
         pings.syncnick(name)
      else
         print("missing name argument")
      end
   end
end)

